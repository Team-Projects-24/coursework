//* @author Ben Pritchard
//*
//* @description This file contains the schema for the database. The database is generated using this schema.

generator client {
  provider = "prisma-client-js"
}

//generate the ERD diagram
generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") //env variable for database url
}

model User {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String           @id @unique
  name           String
  password       String
  role           Role             @default(EMPLOYEE)
  sentMessages   Message[]
  chatrooms      Chatroom[]
  profileImage   String?          @db.VarChar(500)
  teams          UserOnTeam[]
  seenMessages   SeenBy[]
  leaderOf       Team[]
  PerformanceLog PerformanceLog[]
}

enum Role {
  EMPLOYEE
  MANAGER
  TEAMLEADER
}

model Chatroom {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  chatImage   String?      @db.VarChar(500)
  description String
  private     Boolean      @default(true)
  creatorId   String
  members     User[]
  messages    Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  sentAt     DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  senderId   String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId Int
  content    String
  seenBy     SeenBy[]
  // isImage          Boolean          @default(false)
  // imageURL         String? @db.VarChar(500)
}

model SeenBy {
  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([messageId, userId])
}


model UserOnTeam {
  userId String
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  teamId Int
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Team {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  teamImage String?      @db.VarChar(500)
  members   UserOnTeam[]
  leader    User         @relation(fields: [leaderId], references: [userId])
  leaderId  String
}

model PerformanceLog {
  user              User     @relation(fields: [userId], references: [userId])
  userId            String
  date              DateTime @default(now())
  manHoursSet       Float
  manHoursCompleted Float

  @@id([userId, date])
}

// for handling images, place image tag containing url within the body of the message, backend fetches image and displays within the message
